// ====================================================================
// This file is part of Polylogarithm.
//
// Polylogarithm is licenced under the MIT License.
// ====================================================================

#include "Sl.hpp"
#include <cmath>
#include <limits>

namespace polylogarithm {

namespace {

constexpr double PI = 3.14159265358979324;
constexpr double PI2 = PI*PI;

constexpr bool is_even(int64_t n) noexcept
{
   return n % 2 == 0;
}

// range-reduces x in [0,pi] for even n
void range_reduce_even(double& x) noexcept
{
   if (x < 0) {
      x = -x;
   }

   if (x >= 2*PI) {
      x = std::fmod(x, 2*PI);
   }

   if (x > PI) {
      const auto p0 = 6.28125;
      const auto p1 = 0.0019353071795864769253;
      x = (p0 - x) + p1;
   }
}

// range-reduces x in [0,pi] for odd n, retuns sign
double range_reduce_odd(double& x) noexcept
{
   double sgn = 1.0;

   if (x < 0) {
      x = -x;
      sgn = -1;
   }

   if (x >= 2*PI) {
      x = std::fmod(x, 2*PI);
   }

   if (x > PI) {
      const auto p0 = 6.28125;
      const auto p1 = 0.0019353071795864769253;
      x = (p0 - x) + p1;
      sgn = -sgn;
   }

   return sgn;
}

// range-reduces x to be in [0,pi], returns sign
double range_reduce(int64_t n, double& x) noexcept
{
   double sgn = 1.0;

   if (is_even(n)) {
      range_reduce_even(x);
   } else {
      sgn = range_reduce_odd(x);
   }

   return sgn;
}

// returns Sl(n,x) using the naive series expansion
double sl_series(int64_t n, double x) noexcept
{
   const auto eps = std::numeric_limits<double>::epsilon();
   const auto kmax = static_cast<int64_t>(std::ceil(std::pow(eps, -1.0/n)));
   const double co = std::cos(x);
   double sum = 0;

   if (is_even(n)) {
      double co2 = 1;  // cos((n-2)*x)
      double co1 = co; // cos((n-1)*x)
      sum = co;
      for (int64_t k = 2; k <= kmax; ++k) {
         const double con = 2*co*co1 - co2; // cos(n*x)
         co2 = co1;
         co1 = con;
         sum += con*std::pow(k, -n);
      }
   } else {
      double si = std::sin(x);
      double si2 = 0;  // sin((n-2)*x)
      double si1 = si; // sin((n-1)*x)
      sum = si;
      for (int64_t k = 2; k <= kmax; ++k) {
         si = 2*co*si1 - si2; // sin(n*x)
         si2 = si1;
         si1 = si;
         sum += si*std::pow(k, -n);
      }
   }

   return sum;
}

} // anonymous namespace

/**
 * @brief Glaisher-Clausen function \f$\operatorname{Sl}_n(x)\f$ for \f$n>0\f$
 * @param n degree of Glaisher-Clausen function
 * @param x real angle
 * @return \f$\operatorname{Sl}_n(x)\f$
 * @author Alexander Voigt
 *
 * Note: We set \f$\operatorname{Sl}_1(0)=0\f$ for consistency with
 * the series expansion.
 */
double Sl(int64_t n, double x)
{
   if (n < 1) {
      return std::numeric_limits<double>::quiet_NaN();
   }

   const auto sgn = range_reduce(n, x);

   if (!is_even(n) && x == 0) {
      return x;
   }

   if (n ==  1) { return sgn*(PI/2 - 1./2*x); }
   if (n ==  2) { return sgn*(PI2/6 + (-1./2*PI + 1./4*x)*x); }
   if (n ==  3) { return sgn*(x*(PI2/6 + (-1./4*PI + 1./12*x)*x)); }

   const double x2 = x*x;

   if (n ==  4) { return sgn*(1.08232323371113819151600369654116790324 + (-0.82246703342411321823620758332301259476 + (0.26179938779914943653855361527329190704 - 0.02083333333333333333333333333333333333*x)*x)*x2); }
   if (n ==  5) { return sgn*(x*(1.08232323371113819151600369654116790324 + (-0.27415567780803773941206919444100419825 + (0.06544984694978735913463840381832297676 - 0.00416666666666666666666666666666666667*x)*x)*x2)); }
   if (n ==  6) { return sgn*(1.01734306198444913971451792979092052962 + x2*(-0.54116161685556909575800184827058395148 + (0.06853891945200943485301729861025104957 + (-0.01308996938995747182692768076366459535 + 0.00069444444444444444444444444444444444*x)*x)*x2)); }
   if (n ==  7) { return sgn*(x*(1.01734306198444913971451792979092052962 + x2*(-0.18038720561852303191933394942352798392 + (0.0137077838904018869706034597220502099 + (-0.00218166156499291197115461346061076589 + 0.00009920634920634920634920634920634921*x)*x)*x2))); }
   if (n ==  8) { return sgn*(1.00407735619794433937868523850865245599 + x2*(-0.50867153099222456985725896489546026481 + x2*(0.04509680140463075797983348735588199584 + (-0.00228463064840031449510057662034170166 + (0.00031166593785613028159351620865868084 - 0.00001240079365079365079365079365079365*x)*x)*x2))); }
   if (n ==  9) { return sgn*(x*(1.00407735619794433937868523850865245599 + x2*(-0.1695571769974081899524196549651534216 + x2*(0.00901936028092615159596669747117639928 + (-0.00032637580691433064215722523147738596 + (0.00003895824223201628519918952608233511 - 1.37786596119929453262786596119929e-6*x)*x)*x2)))); }
   if (n == 10) { return sgn*(1.00099457512781808533714595890031902742 + x2*(-0.50203867809897216968934261925432624194 + x2*(0.0423892942493520474881049137412883547 + x2*(-0.0015032267134876919326611162451960666 + (0.00004079697586429133026965315393467323 + (-4.32869358133514279990994734248167e-6 + 1.3778659611992945326278659611993e-7*x)*x)*x2)))); }
   if (n == 11) { return sgn*(x*(1.00099457512781808533714595890031902742 + x2*(-0.16734622603299072322978087308477541398 + x2*(0.00847785884987040949762098274825766981 + x2*(-0.00021474667335538456180873089217086662 + (4.53299731825459225218368377051925e-6 + (-4.3286935813351427999099473424817e-7 + 1.252605419272085938752605419272e-8*x)*x)*x2))))); }
   if (n == 12) { return sgn*(1.00024608655330804829863799804773972216 + x2*(-0.50049728756390904266857297945015937611 + x2*(0.04183655650824768080744521827119384652 + x2*(-0.00141297647497840158293683045804294403 + x2*(0.00002684333416942307022609136152135836 + (-4.5329973182545922521836837705192e-7 + (3.935175983031947999918133947711e-8 - 1.04383784939340494896050451606e-9*x)*x)*x2))))); }
   if (n == 13) { return sgn*(x*(1.00024608655330804829863799804773972216 + x2*(-0.16683242918796968088952432648338636697 + x2*(0.00836731130164953616148904365423876373 + x2*(-0.00020185378213977165470526149400613446 + x2*(2.98259268549145224734348461348417e-6 + (-4.120906652958720229257894336836e-8 + (3.27931331919328999993177828976e-9 - 8.029521918410807299696188585e-11*x)*x)*x2)))))); }
   if (n == 14) { return sgn*(1.00006124813505870482925854510513864395 + x2*(-0.50012304327665402414931899902386850299 + x2*(0.04170810729699242022238108162084659174 + x2*(-0.0013945518836082560269148406090398079 + x2*(0.0000252317227674714568381576867507661 + x2*(-2.9825926854914522473434846134856e-7 + (3.4340888774656001910482452807e-9 + (-2.5225487070717615384090602229e-10 + 5.73537279886486235692584899e-12*x)*x)*x2)))))); }
   if (n == 15) { return sgn*(x*(1.00006124813505870482925854510513864395 + x2*(-0.16670768109221800804977299967462192893 + x2*(0.00834162145939848404447621632416931835 + x2*(-0.00019922169765832228955926294414853602 + x2*(2.80352475194127298201752075008418e-6 + x2*(-2.711447895901320224857713284997e-8 + (2.6416068288196924546524963697e-10 + (-1.801820505051258241720757302e-11 + 3.823581865909908237950565992894035222077550119e-13*x)*x)*x2))))))); }
   if (n == 16) { return sgn*(1.00001528225940865187173257148771504874 + x2*(-0.50003062406752935241462927255256932198 + x2*(0.04167692027305450201244324991865684033 + x2*(-0.00139027024323308067407936938736164479 + x2*(0.000024902712207290286194907868018567 + x2*(-2.8035247519412729820175207500757e-7 + x2*(2.25953991325110018738142773754e-9 + (-1.886862020585494610466068836e-11 + (1.2012136700341721611471715347102004543167177933e-12 - 2.38973866619369264871910374555877201379846882e-14*x)*x)*x2))))))); }
   if (n == 17) { return sgn*(x*(1.00001528225940865187173257148771504874 + x2*(-0.16667687468917645080487642418418977399 + x2*(0.00833538405461090040248864998373245454 + x2*(-0.00019861003474758295343990991248027429 + x2*(2.76696802303225402165642977983148e-6 + x2*(-2.548658865401157256379564318122e-8 + x2*(1.7381076255777693749087905673e-10 + (-1.2579080137236630736440458903649820484513744495e-12 + (7.5075854377135760071698220919387528394794862e-14 - 1.4057286271727603815994727915051600081167463e-15*x)*x)*x2)))))))); }
   if (n == 18) { return sgn*(1.00000381729326499983985646162931158806 + x2*(-0.50000764112970432593586628574372523391 + x2*(0.04166921867229411270121910604605414541 + x2*(-0.00138923067576848340041477499728783703 + x2*(0.00002482625434344786917998873906006869 + x2*(-2.766968023032254021656429779943e-7 + x2*(2.12388238783429771364963693188e-9 + x2*(-1.241505446841263839220564691e-11 + (7.86192508577289421027528681478113780282109019e-14 + (-4.4162267280668094159822482893757369643996976e-15 + 7.80960348429311323110818217502866671175969e-17*x)*x)*x2)))))))); }
   if (n == 19) { return sgn*(x*(1.00000381729326499983985646162931158806 + x2*(-0.16666921370990144197862209524782021767 + x2*(0.00833384373445882254024382120921082908 + x2*(-0.00019846152510978334291639642818358869 + x2*(2.75847270482754101999874878432976e-6 + x2*(-2.515425475483867292414936163492e-8 + x2*(1.6337556829494597797304899476e-10 + x2*(-8.276702978941758928137097939516758220936903338e-13 + (4.6246618151605260060442863616359634134241695e-15 + (-2.453459293370449675545693494097631646888718e-16 + 4.1103176233121648584779906184361403746102e-18*x)*x)*x2))))))))); }
   if (n == 20) { return sgn*(1.00000095396203387279611315203997344306 + x2*(-0.50000190864663249991992823081465579403 + x2*(0.04166730342747536049465552381188890919 + x2*(-0.00138897395574313709004063686821074073 + x2*(0.00002480769063872291786454955352193002 + x2*(-2.7584727048275410199987487844475e-7 + x2*(2.09618789623655607701244680291e-9 + x2*(-1.166968344963899842664635677e-11 + x2*(5.17293936183859933008568621219797388808556372e-14 + (-2.569256563978070003357936867575535229680093e-16 + (1.2912943649318156187082597337355956036256e-17 - 2.055158811656082429238995309218070187304e-19*x)*x)*x2))))))))); }
   if (n == 21) { return sgn*(x*(1.00000095396203387279611315203997344306 + x2*(-0.16666730288221083330664274360488526468 + x2*(0.0083334606854950720989311047624836142 + x2*(-0.00019842485082044815572009098117679263 + x2*(2.7564100709692130960610615025566e-6 + x2*(-2.507702458934128199998862531316e-8 + x2*(1.6124522278742739053941898484e-10 + x2*(-7.779788966425998951097571179057633165274733065e-13 + x2*(3.0429055069638819588739330659988081694620908e-15 + (-1.3522402968305631596620720355660711735158e-17 + (6.456471824659078093541298668677978018124e-19 - 9.7864705316956306154237871867527151777e-21*x)*x)*x2)))))))))); }
   if (n == 22) { return sgn*(1.00000023845050272773299000364796200809 + x2*(-0.50000047698101693639805657600710042819 + x2*(0.04166682572055270832666068589991566168 + x2*(-0.00138891011424917868315518412712469919 + x2*(0.00002480310635255601946501137264645673 + x2*(-2.7564100709692130960610615025566e-7 + x2*(2.08975204911177349999905210943e-9 + x2*(-1.151751591338767075281564177e-11 + x2*(4.86236810401624934443598198691102072829670529e-14 + x2*(-1.690503059424378866041073925554893427478879e-16 + (6.76120148415281579831036017783035586758e-19 + (-3.07451039269479909216252317556094191341e-20 + 4.448395696225286643374448721251234172e-22*x)*x)*x2)))))))))); }
   if (n == 23) { return sgn*(x*(1.00000023845050272773299000364796200809 + x2*(-0.16666682566033897879935219201095767162 + x2*(0.00833336514411054166533213718024137805 + x2*(-0.00019841573060702552616502630386659459 + x2*(2.75590070583955771833459696071741e-6 + x2*(-2.505827337244739178237328638688e-8 + x2*(1.6075015762398257692300400842e-10 + x2*(-7.678343942258447168543761182819578413904206358e-13 + x2*(2.8602165317742643202564599923006004284098087e-15 + x2*(-8.8973845232862045581109153976573338288322e-18 + (3.21961975435848371348112389420493136549e-20 + (-1.397504723952181405528419625254973597e-21 + 1.93408508531534201885845596576140617e-23*x)*x)*x2))))))))))); }
   if (n == 24) { return sgn*(1.00000005960818905125947961244022532705 + x2*(-0.50000011922525136386649500182398100405 + x2*(0.04166670641508474469983804800148527986 + x2*(-0.00138889419068509027755535619670689634 + x2*(0.00002480196632587819077062828798332432 + x2*(-2.7559007058395577183345969607174e-7 + x2*(2.08818944770394931519777386557e-9 + x2*(-1.148215411599875549450028632e-11 + x2*(4.79896496391152948033985073926223650869004394e-14 + x2*(-1.589009184319035733475811106833666904671266e-16 + x2*(4.448692261643102279055457698828666914377e-19 + (-1.4634635247084016879459654064567869849e-21 + (6.0761074954442669805583461967607548e-23 - 8.058687855480591745243566524005859e-25*x)*x)*x2))))))))))); }
   if (n == 25) { return sgn*(x*(1.00000005960818905125947961244022532705 + x2*(-0.16666670640841712128883166727466033468 + x2*(0.00833334128301694893996760960029705597 + x2*(-0.00019841345581215575393647945667241376 + x2*(2.75577403620868786340314310925826e-6 + x2*(-2.505364278035961562122360873379e-8 + x2*(1.6062995751568840886136722043e-10 + x2*(-7.654769410665836996333524210366101004611481858e-13 + x2*(2.822920567006782047258735728977786181582112e-15 + x2*(-8.3632062332580828077674268780719310772978e-18 + x2*(2.11842488649671537097878938039460329257e-20 + (-6.3628848900365290780259365498121174e-23 + (2.5317114564351112418993109153169811e-24 - 3.22347514219223669809742660960235e-26*x)*x)*x2)))))))))))); }

   return sgn*sl_series(n, x);
}

} // namespace polylogarithm
